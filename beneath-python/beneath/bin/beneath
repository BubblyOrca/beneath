#!/usr/bin/env python
import argparse
import json
import os

from beneath import config
from beneath.client import Client

def str2bool(v):
    if isinstance(v, bool):
       return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

def get_client():
  return Client()

def auth(args):
  try:
    Client(secret=args.secret)
    config.write_secret(args.secret)
    print("You have authenticated successfully!")
  except:
    config.write_secret("")
    print("Your attempt to authenticate failed. Are you using an API secret generated in the Beneath web app?")

def list_projects(args):
  # start client with the secret stored in .beneath/secret
  client = get_client()

  # submit GraphQL query to get the user's ID
  result = client.get_me()
  userID = result['userID']

  # submit GraphQL query to get the user's projects
  result = client.get_user_by_id(userID)
  projects = result['projects']

  # print out the projects to the user
  for project in projects:
    print(project['name'])
  return

def list_streams(args):
  # start client with the secret stored in .beneath/secret
  client = get_client()

  # submit GraphQL query to get a project's streams
  result = client.get_project_by_name(args.project)
  streams = result['streams']

  # print out the streams to the user
  for streamname in streams:
      print(streamname['name'])
  return

def model_init(args):
  print("init")
  print(args)
  # client = get_client()
  pass

def model_sim(args):
  print("model_sim")
  print(args)
  # client = get_client()
  pass

def model_stage(args):
  print("model_stage")
  print(args)
  # client = get_client()
  pass

def model_deploy(args):
  print("model_deploy")
  print(args)
  # client = get_client()
  pass

def stream_create_ext(args):
  # start client with the secret stored in .beneath/secret
  client = get_client()

  # submit GraphQL query to get the projectID from the user-supplied projectName
  result = client.get_project_by_name(args.project)
  project_id = result['projectID']
  
  # read schema from the user-supplied file
  with open(args.file, "r") as f:
    schema = f.read()
  
  # ensure user's text is a bool
  manual = args.manual

  # submit GraphQL mutation to create an external stream
  result = client.create_external_stream(project_id, schema, manual)

  # print out the stream's details to the user
  pretty_print_graphql_result(result["data"]["createExternalStream"], [
    "name",
    "description",
    "external",
    "batch",
    "manual",
    "project",
    "keyFields",
  ])

def stream_update_ext(args):
  # start client with the secret stored in .beneath/secret
  client = get_client()

  # get stream id
  result = client.get_stream_details(project_name=args.project, stream_name=args.stream)
  stream_id = result['streamID']

  # read schema from the user-supplied file
  schema = None
  if args.file:
    with open(args.file, "r") as f:
      schema = f.read()

  # ensure user's text is a bool
  manual = str2bool(args.manual)
  
  # submit GraphQL mutation to update stream
  result = client.update_external_stream(stream_id, schema, manual)
  
  # print out the stream's details to the user 
  pretty_print_graphql_result(result, [
    "name",
    "description",
    "external",
    "batch",
    "manual",
    "project",
    "keyFields",
  ])

def pretty_print_graphql_result(result, fields=[]):
  if len(fields) == 0:
    selected = result
  else:
    selected = { k: v for k, v in result.items() if k in fields }
  pretty = json.dumps(selected, indent=True)
  print(pretty)

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  _root = parser.add_subparsers()

  # auth parser
  _auth = _root.add_parser('auth')
  _auth.set_defaults(func=auth)
  _auth.add_argument('secret', type=str)

  # list parser and subparsers
  _list = _root.add_parser('list').add_subparsers()

  _list_projects = _list.add_parser('projects')
  _list_projects.set_defaults(func=list_projects)

  _list_streams = _list.add_parser('streams')
  _list_streams.set_defaults(func=list_streams)
  _list_streams.add_argument('--project', type=str, required=True)

  # model parser and subparsers
  _model = _root.add_parser('model').add_subparsers()

  _model_init = _model.add_parser('init')
  _model_init.set_defaults(func=model_init)
  _model_init.add_argument('model', type=str)
  _model_init.add_argument('--project', type=str, required=True)

  _model_sim = _model.add_parser('simulate')
  _model_sim.set_defaults(func=model_sim)
  _model_sim.add_argument('--sample-size', type=int, required=True)

  _model_stage = _model.add_parser('stage')
  _model_stage.set_defaults(func=model_stage)

  _model_deploy = _model.add_parser('deploy')
  _model_deploy.set_defaults(func=model_deploy)
  _model_deploy.add_argument('--update', type=str, required=True)

  # stream parser and subparsers
  _stream = _root.add_parser('stream').add_subparsers()

  _stream_create_ext = _stream.add_parser('create-external')
  _stream_create_ext.set_defaults(func=stream_create_ext)
  _stream_create_ext.add_argument('--project', type=str, required=True)
  _stream_create_ext.add_argument('--file', type=str, required=True, help="this file should contain the GraphQL schema for the stream you would like to create")
  _stream_create_ext.add_argument('--manual', type=str2bool)

  _stream_update_ext = _stream.add_parser('update-external')
  _stream_update_ext.set_defaults(func=stream_update_ext)
  _stream_update_ext.add_argument('stream', type=str)
  _stream_update_ext.add_argument('--project', type=str, required=True)
  _stream_update_ext.add_argument('--file', type=str, help="This file should contain the stream's schema and an updated description. Only the description should change, the schema itself should not change.")
  _stream_update_ext.add_argument('--manual', type=str2bool)

  # parse the args and call the relevant function
  args = parser.parse_args()
  try:
    func = args.func
  except AttributeError:
    parser.error("too few arguments")
  func(args)

