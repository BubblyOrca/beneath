extend type Query {
  authTicketByID(authTicketID: UUID!): AuthTicket!
}

extend type Mutation {
  registerUserConsent(
    userID: UUID!
    terms: Boolean
    newsletter: Boolean
  ): PrivateUser!
  updateUserQuotas(
    userID: UUID!
    readQuota: Int
    writeQuota: Int
    scanQuota: Int
  ): PrivateUser!
  updateUserProjectPermissions(
    userID: UUID!
    projectID: UUID!
    view: Boolean
    create: Boolean
    admin: Boolean
  ): PermissionsUsersProjects!
  updateUserOrganizationPermissions(
    userID: UUID!
    organizationID: UUID!
    view: Boolean
    create: Boolean
    admin: Boolean
  ): PermissionsUsersOrganizations!
  createAuthTicket(input: CreateAuthTicketInput!): AuthTicket!
  updateAuthTicket(input: UpdateAuthTicketInput!): AuthTicket
}

type PrivateUser {
  userID: ID!
  email: String!
  createdOn: Time!
  updatedOn: Time!
  consentTerms: Boolean!
  consentNewsletter: Boolean!
  quotaEpoch: Time!
  quotaStartTime: Time!
  quotaEndTime: Time!
  readQuota: Int
  writeQuota: Int
  scanQuota: Int
  billingOrganizationID: UUID!
  billingOrganization: PublicOrganization!
}

type PermissionsUsersProjects {
  userID: UUID!
  projectID: UUID!
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}

type PermissionsUsersOrganizations {
  userID: UUID!
  organizationID: UUID!
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}

type AuthTicket {
  authTicketID: UUID!
  requesterName: String!
  issuedSecret: NewUserSecret
  createdOn: Time!
  updatedOn: Time!
}

input CreateAuthTicketInput {
  requesterName: String!
}

input UpdateAuthTicketInput {
  authTicketID: UUID!
  approve: Boolean!
}
