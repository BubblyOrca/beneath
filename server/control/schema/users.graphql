# extend type Query {}

extend type Mutation {
  registerUserConsent(userID: UUID!, terms: Boolean, newsletter: Boolean): PrivateUser!
  updateUserQuotas(userID: UUID!, readQuota: Int, writeQuota: Int, scanQuota: Int): PrivateUser!
  updateUserProjectPermissions(userID: UUID!, projectID: UUID!, view: Boolean, create: Boolean, admin: Boolean): PermissionsUsersProjects!
  updateUserOrganizationPermissions(userID: UUID!, organizationID: UUID!, view: Boolean, create: Boolean, admin: Boolean): PermissionsUsersOrganizations!
}

type PrivateUser {
  userID: ID!
  email: String!
  createdOn: Time!
  updatedOn: Time!
  consentTerms: Boolean!
  consentNewsletter: Boolean!
  quotaEpoch: Time
  readQuota: Int
  writeQuota: Int
  scanQuota: Int
  billingOrganizationID: UUID!
  billingOrganization: PublicOrganization!
}

type PermissionsUsersProjects {
  userID: UUID!
  projectID: UUID!
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}

type PermissionsUsersOrganizations {
  userID: UUID!
  organizationID: UUID!
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}
