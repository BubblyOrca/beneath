extend type Query {
  exploreProjects: [Project!]
  projectsForUser(userID: UUID!): [Project!]
  projectByOrganizationAndName(
    organizationName: String!
    projectName: String!
  ): Project!
  projectByID(projectID: UUID!): Project!
  projectMembers(projectID: UUID!): [ProjectMember!]!
}

extend type Mutation {
  createProject(input: CreateProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
  deleteProject(input: DeleteProjectInput!): Boolean!
}

type Project {
  projectID: ID!
  name: String!
  displayName: String!
  site: String
  description: String
  photoURL: String
  public: Boolean!
  organization: PublicOrganization!
  createdOn: Time!
  updatedOn: Time!
  streams: [Stream!]!
  services: [Service!]!
  permissions: PermissionsUsersProjects!
}

type ProjectMember {
  projectID: ID!
  userID: ID!
  name: String!
  displayName: String!
  photoURL: String
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}

input CreateProjectInput {
  organizationID: UUID!
  projectName: String!
  displayName: String
  public: Boolean
  description: String
  site: String
  photoURL: String
}

input UpdateProjectInput {
  projectID: UUID!
  displayName: String
  public: Boolean
  description: String
  site: String
  photoURL: String
}

input DeleteProjectInput {
  projectID: UUID!
}
