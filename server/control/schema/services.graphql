extend type Query {
  serviceByID(serviceID: UUID!): Service!
  serviceByOrganizationProjectAndName(organizationName: String!, projectName: String!, serviceName: String!): Service!
}

extend type Mutation {
  createService(input: CreateServiceInput!): Service!
  updateService(input: UpdateServiceInput!): Service!
  updateServiceStreamPermissions(serviceID: UUID!, streamID: UUID!, read: Boolean, write: Boolean): PermissionsServicesStreams!
  deleteService(serviceID: UUID!): Boolean!
}

type Service {
  serviceID: UUID!
  name: String!
  description: String
  sourceURL: String
  project: Project!
  quotaEpoch: Time
  readQuota: Int
  writeQuota: Int
  scanQuota: Int
  createdOn: Time!
  updatedOn: Time!
}

type PermissionsServicesStreams {
  serviceID: UUID!
  streamID: UUID!
  read: Boolean!
  write: Boolean!
}

input CreateServiceInput {
  organizationName: String!
  projectName: String!
  serviceName: String!
  description: String
  sourceURL: String
  readQuota: Int
  writeQuota: Int
  scanQuota: Int
}

input UpdateServiceInput {
  organizationName: String!
  projectName: String!
  serviceName: String!
  description: String
  sourceURL: String
  readQuota: Int
  writeQuota: Int
  scanQuota: Int
}
