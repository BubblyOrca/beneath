extend type Query {
  streamByID(streamID: UUID!): Stream!
  streamByOrganizationProjectAndName(
    organizationName: String!
    projectName: String!
    streamName: String!
  ): Stream!
  streamInstanceByOrganizationProjectStreamAndVersion(
    organizationName: String!
    projectName: String!
    streamName: String!
    version: Int!
  ): StreamInstance!
  streamInstanceByStreamAndVersion(
    streamID: UUID!
    version: Int!
  ): StreamInstance!
  streamInstancesForStream(streamID: UUID!): [StreamInstance!]!
  streamInstancesByOrganizationProjectAndStreamName(
    organizationName: String!
    projectName: String!
    streamName: String!
  ): [StreamInstance!]!
  streamsForUser(userID: UUID!): [Stream!]!
  compileSchema(input: CompileSchemaInput!): CompileSchemaOutput!
}

extend type Mutation {
  createStream(input: CreateStreamInput!): Stream!
  updateStream(input: UpdateStreamInput!): Stream!
  deleteStream(streamID: UUID!): Boolean!
  createStreamInstance(input: CreateStreamInstanceInput!): StreamInstance!
  updateStreamInstance(input: UpdateStreamInstanceInput!): StreamInstance!
  deleteStreamInstance(instanceID: UUID!): Boolean!
}

enum StreamSchemaKind {
  GraphQL
  Avro
}

type Stream {
  streamID: ID!
  name: String!
  description: String
  createdOn: Time!
  updatedOn: Time!
  project: Project!
  meta: Boolean!
  allowManualWrites: Boolean!

  schemaKind: StreamSchemaKind!
  schema: String!
  avroSchema: String!
  canonicalAvroSchema: String!
  canonicalIndexes: String!
  streamIndexes: [StreamIndex!]!

  useLog: Boolean!
  useIndex: Boolean!
  useWarehouse: Boolean!
  logRetentionSeconds: Int!
  indexRetentionSeconds: Int!
  warehouseRetentionSeconds: Int!

  primaryStreamInstance: StreamInstance
  primaryStreamInstanceID: UUID
  instancesCreatedCount: Int!
  instancesDeletedCount: Int!
  instancesMadeFinalCount: Int!
  instancesMadePrimaryCount: Int!
}

type StreamInstance {
  streamInstanceID: ID!
  stream: Stream!
  streamID: UUID!
  version: Int!
  createdOn: Time!
  madePrimaryOn: Time
  madeFinalOn: Time
}

type StreamIndex {
  indexID: ID!
  fields: [String!]!
  primary: Boolean!
  normalize: Boolean!
}

input CompileSchemaInput {
  schemaKind: StreamSchemaKind!
  schema: String!
  indexes: String
}

type CompileSchemaOutput {
  canonicalAvroSchema: String!
  canonicalIndexes: String!
}

input CreateStreamInput {
  organizationName: String!
  projectName: String!
  streamName: String!
  schemaKind: StreamSchemaKind!
  schema: String!
  indexes: String
  description: String
  meta: Boolean
  allowManualWrites: Boolean
  useLog: Boolean
  useIndex: Boolean
  useWarehouse: Boolean
  logRetentionSeconds: Int
  indexRetentionSeconds: Int
  warehouseRetentionSeconds: Int

  updateIfExists: Boolean
}

input UpdateStreamInput {
  streamID: UUID!
  schemaKind: StreamSchemaKind
  schema: String
  indexes: String
  description: String
  allowManualWrites: Boolean
}

input CreateStreamInstanceInput {
  streamID: UUID!
  version: Int!
  makePrimary: Boolean
  updateIfExists: Boolean
}

input UpdateStreamInstanceInput {
  streamInstanceID: UUID!
  makeFinal: Boolean
  makePrimary: Boolean
}
