extend type Query {
  tableByID(tableID: UUID!): Table!
  tableByOrganizationProjectAndName(
    organizationName: String!
    projectName: String!
    tableName: String!
  ): Table!
  tableInstanceByOrganizationProjectTableAndVersion(
    organizationName: String!
    projectName: String!
    tableName: String!
    version: Int!
  ): TableInstance!
  tableInstanceByTableAndVersion(tableID: UUID!, version: Int!): TableInstance!
  tableInstancesForTable(tableID: UUID!): [TableInstance!]!
  tableInstancesByOrganizationProjectAndTableName(
    organizationName: String!
    projectName: String!
    tableName: String!
  ): [TableInstance!]!
  tablesForUser(userID: UUID!): [Table!]!
  compileSchema(input: CompileSchemaInput!): CompileSchemaOutput!
}

extend type Mutation {
  createTable(input: CreateTableInput!): Table!
  updateTable(input: UpdateTableInput!): Table!
  deleteTable(tableID: UUID!): Boolean!
  createTableInstance(input: CreateTableInstanceInput!): TableInstance!
  updateTableInstance(input: UpdateTableInstanceInput!): TableInstance!
  deleteTableInstance(instanceID: UUID!): Boolean!
}

enum TableSchemaKind {
  GraphQL
  Avro
}

type Table {
  tableID: ID!
  name: String!
  description: String
  createdOn: Time!
  updatedOn: Time!
  project: Project!
  meta: Boolean!
  allowManualWrites: Boolean!

  schemaKind: TableSchemaKind!
  schema: String!
  avroSchema: String!
  canonicalAvroSchema: String!
  canonicalIndexes: String!
  tableIndexes: [TableIndex!]!

  useLog: Boolean!
  useIndex: Boolean!
  useWarehouse: Boolean!
  logRetentionSeconds: Int!
  indexRetentionSeconds: Int!
  warehouseRetentionSeconds: Int!

  primaryTableInstance: TableInstance
  primaryTableInstanceID: UUID
  instancesCreatedCount: Int!
  instancesDeletedCount: Int!
  instancesMadeFinalCount: Int!
  instancesMadePrimaryCount: Int!
}

type TableInstance {
  tableInstanceID: ID!
  table: Table!
  tableID: UUID!
  version: Int!
  createdOn: Time!
  madePrimaryOn: Time
  madeFinalOn: Time
}

type TableIndex {
  indexID: ID!
  fields: [String!]!
  primary: Boolean!
  normalize: Boolean!
}

input CompileSchemaInput {
  schemaKind: TableSchemaKind!
  schema: String!
  indexes: String
}

type CompileSchemaOutput {
  canonicalAvroSchema: String!
  canonicalIndexes: String!
}

input CreateTableInput {
  organizationName: String!
  projectName: String!
  tableName: String!
  schemaKind: TableSchemaKind!
  schema: String!
  indexes: String
  description: String
  meta: Boolean
  allowManualWrites: Boolean
  useLog: Boolean
  useIndex: Boolean
  useWarehouse: Boolean
  logRetentionSeconds: Int
  indexRetentionSeconds: Int
  warehouseRetentionSeconds: Int

  updateIfExists: Boolean
}

input UpdateTableInput {
  tableID: UUID!
  schemaKind: TableSchemaKind
  schema: String
  indexes: String
  description: String
  allowManualWrites: Boolean
}

input CreateTableInstanceInput {
  tableID: UUID!
  version: Int
  makePrimary: Boolean
  updateIfExists: Boolean
}

input UpdateTableInstanceInput {
  tableInstanceID: UUID!
  makeFinal: Boolean
  makePrimary: Boolean
}
