// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/satori/go.uuid"
	"gitlab.com/beneath-hq/beneath/control/entity"
)

type Organization interface {
	IsOrganization()
}

type Metrics struct {
	EntityID     uuid.UUID `json:"entityID"`
	Period       string    `json:"period"`
	Time         time.Time `json:"time"`
	ReadOps      int       `json:"readOps"`
	ReadBytes    int       `json:"readBytes"`
	ReadRecords  int       `json:"readRecords"`
	WriteOps     int       `json:"writeOps"`
	WriteBytes   int       `json:"writeBytes"`
	WriteRecords int       `json:"writeRecords"`
}

type NewServiceSecret struct {
	Secret *entity.ServiceSecret `json:"secret"`
	Token  string                `json:"token"`
}

type NewUserSecret struct {
	Secret *entity.UserSecret `json:"secret"`
	Token  string             `json:"token"`
}

type PrivateOrganization struct {
	OrganizationID    string                                `json:"organizationID"`
	Name              string                                `json:"name"`
	DisplayName       string                                `json:"displayName"`
	Description       *string                               `json:"description"`
	PhotoURL          *string                               `json:"photoURL"`
	CreatedOn         time.Time                             `json:"createdOn"`
	UpdatedOn         time.Time                             `json:"updatedOn"`
	PrepaidReadQuota  *int                                  `json:"prepaidReadQuota"`
	PrepaidWriteQuota *int                                  `json:"prepaidWriteQuota"`
	PrepaidScanQuota  *int                                  `json:"prepaidScanQuota"`
	ReadQuota         *int                                  `json:"readQuota"`
	WriteQuota        *int                                  `json:"writeQuota"`
	ScanQuota         *int                                  `json:"scanQuota"`
	ReadUsage         int                                   `json:"readUsage"`
	WriteUsage        int                                   `json:"writeUsage"`
	ScanUsage         int                                   `json:"scanUsage"`
	Projects          []*entity.Project                     `json:"projects"`
	PersonalUserID    *uuid.UUID                            `json:"personalUserID"`
	PersonalUser      *entity.User                          `json:"personalUser"`
	Permissions       *entity.PermissionsUsersOrganizations `json:"permissions"`
}

func (PrivateOrganization) IsOrganization() {}

type EntityKind string

const (
	EntityKindOrganization   EntityKind = "Organization"
	EntityKindService        EntityKind = "Service"
	EntityKindStreamInstance EntityKind = "StreamInstance"
	EntityKindStream         EntityKind = "Stream"
	EntityKindUser           EntityKind = "User"
)

var AllEntityKind = []EntityKind{
	EntityKindOrganization,
	EntityKindService,
	EntityKindStreamInstance,
	EntityKindStream,
	EntityKindUser,
}

func (e EntityKind) IsValid() bool {
	switch e {
	case EntityKindOrganization, EntityKindService, EntityKindStreamInstance, EntityKindStream, EntityKindUser:
		return true
	}
	return false
}

func (e EntityKind) String() string {
	return string(e)
}

func (e *EntityKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityKind", str)
	}
	return nil
}

func (e EntityKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
