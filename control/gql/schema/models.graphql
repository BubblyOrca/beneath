extend type Query {
  model(organizationName: String!, projectName: String!, modelName: String!): Model!
}

# extend type Mutation {
#   createModel(input: CreateModelInput!): Model!
#   updateModel(input: UpdateModelInput!): Model!
#   deleteModel(modelID: UUID!): Boolean!
#   createModelBatch(modelID: UUID!): [StreamInstance!]!
#   commitModelBatch(modelID: UUID!, instanceIDs: [UUID!]!): Boolean!
#   clearPendingModelBatches(modelID: UUID!): Boolean!
# }

type Model {
  modelID: ID!
  name: String!
  description: String
  sourceURL: String
  kind: String!
  createdOn: Time!
  updatedOn: Time!
  project: Project!
  inputStreams: [Stream!]!
  outputStreams: [Stream!]!
  service: Service!
}

input CreateModelInput {
  projectID: UUID!
  name: String!
  kind: String!
  sourceURL: String
  description: String
  inputStreamIDs: [UUID!]!
  outputStreamSchemas: [String!]!
  readQuota: Int!
  writeQuota: Int!
}

input UpdateModelInput {
  modelID: UUID!
  sourceURL: String
  description: String
  inputStreamIDs: [UUID!]!
  outputStreamSchemas: [String!]!
  readQuota: Int
  writeQuota: Int
}
