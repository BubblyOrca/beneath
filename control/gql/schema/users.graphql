extend type Query {
  me: Me
  user(userID: UUID!): User
  userByUsername(username: String!): User
}

extend type Mutation {
  updateMe(username: String, name: String, bio: String, photoURL: String): Me!
  updateUserQuotas(userID: UUID!, readQuota: Int, writeQuota: Int): User!
  updateUserProjectPermissions(userID: UUID!, projectID: UUID!, view: Boolean, create: Boolean, admin: Boolean): PermissionsUsersProjects!
  updateUserOrganizationPermissions(userID: UUID!, organizationID: UUID!, view: Boolean, create: Boolean, admin: Boolean): PermissionsUsersOrganizations!
}

type User {
  userID: ID!
  username: String!
  name: String!
  bio: String
  photoURL: String
  createdOn: Time!
  projects: [Project!]!
  readQuota: Int
  writeQuota: Int
}

type Me {
  userID: ID!
  user: User!
  email: String!
  personalOrganization: Organization!
  billingOrganization: Organization!
  readUsage: Int!
  readQuota: Int
  writeUsage: Int!
  writeQuota: Int
  updatedOn: Time!
}

type PermissionsUsersProjects {
  userID: UUID!
  projectID: UUID!
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}

type PermissionsUsersOrganizations {
  userID: UUID!
  organizationID: UUID!
  view: Boolean!
  create: Boolean!
  admin: Boolean!
}
