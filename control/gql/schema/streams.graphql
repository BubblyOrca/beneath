extend type Query {
  streamByID(streamID: UUID!): Stream!
  streamByOrganizationProjectAndName(organizationName: String!, projectName: String!, streamName: String!): Stream!
  streamInstancesForStream(streamID: UUID!): [StreamInstance!]!
}

extend type Mutation {
  stageStream(
    organizationName: String!,
    projectName: String!,
    streamName: String!,
    schemaKind: StreamSchemaKind!,
    schema: String!,
    retentionSeconds: Int,
    enableManualWrites: Boolean,
    createPrimaryStreamInstance: Boolean,
  ): Stream!
  deleteStream(streamID: UUID!): Boolean!
  createStreamInstance(streamID: UUID!): StreamInstance!
  updateStreamInstance(
    instanceID: UUID!,
    makeFinal: Boolean,
    makePrimary: Boolean,
    deletePreviousPrimary: Boolean,
  ): StreamInstance!
  deleteStreamInstance(instanceID: UUID!): Boolean!
}

enum StreamSchemaKind {
  GraphQL
}

type Stream {
  streamID: ID!
  name: String!
  description: String
  createdOn: Time!
  updatedOn: Time!
  project: Project!
  sourceModel: Model

  schemaKind: StreamSchemaKind!
  schema: String!
  avroSchema: String!
  canonicalAvroSchema: String!
  streamIndexes: [StreamIndex!]!

  retentionSeconds: Int!
  enableManualWrites: Boolean!
  
  primaryStreamInstance: StreamInstance
  primaryStreamInstanceID: UUID
  instancesCreatedCount: Int!
  instancesDeletedCount: Int!
  instancesMadeFinalCount: Int!
  instancesMadePrimaryCount: Int!
}

type StreamInstance {
  streamInstanceID: ID!
  streamID: UUID!
  createdOn: Time!
  madePrimaryOn: Time
  madeFinalOn: Time
}

type StreamIndex {
  indexID: ID!
  fields: [String!]!
  primary: Boolean!
  normalize: Boolean!
}
